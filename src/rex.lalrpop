grammar;

pub rexStmt: String = {
    CREATE <e:rexExpr> SEMI => e,
    LET <id:Id> EQ <re:rexExpr> SEMI => format!("{} = {}", id, re)
};

rexExpr: String = {
    <re:rexExpr> OR <rt:rexTerm> => format!("{re}|{rt}"),
    rexTerm,
};

rexTerm: String = {
    <rt:rexTerm> AND <rf:rexFactor> => format!("{rt}{rf}"),
    rexFactor,
};

rexFactor: String = {
    <rf:rexFactor> REPEAT => Node::new(None, NodeType::Star, None),
    rexUnit,
};

rexUnit: String = {
    Str => Node::new(<>, NodeType::Str, None),
    Id  => <>.to_string(),
    LP <re:rexExpr> RP => format!("({re})"),
};

////////////
// TOKENS //
////////////
match {
    r"[[:alpha:]]+[0-9]*" => Id,
    "create"              => CREATE,
    "let"                 => LET,
    "="                   => EQ,
    "or"                  => OR,
    "and"                 => AND,
    "repeat"              => REPEAT,
    "("                   => LP,
    ")"                   => RP,
    ";"                   => SEMI,
} else {
    r"[.--\s]+"           => Str, // separate because the regex overlaps with Id
}
