use crate::ast::{NodeType,Node};

grammar;

pub rexStmt: Node = {
    CREATE <e:rexExpr> SEMI => e,
    // LET <id:Id> EQ <re:rexExpr> SEMI => format!("{} = {}", id, re),
};

rexExpr: Node = {
    <re:rexExpr> OR <rt:rexTerm> => Node::new(&[re, rt], NodeType::Union),
    rexTerm,
};

rexTerm: Node = {
    <rt:rexTerm> AND <rf:rexFactor> => Node::new(&[rt, rf], NodeType::Concat),
    rexFactor,
};

rexFactor: Node = {
    <rf:rexFactor> REPEAT => Node::new(&[rf], NodeType::Star),
    rexUnit,
};

rexUnit: Node = {
    Str => Node::new_str(<>),
    // Id  => <>.to_string(),
    LP <re:rexExpr> RP => re,
};

////////////
// TOKENS //
////////////
match {
    r"\w+([0-9\w])*" => Id,
    "create"              => CREATE,
    "let"                 => LET,
    "="                   => EQ,
    "or"                  => OR,
    "and"                 => AND,
    "repeat"              => REPEAT,
    "("                   => LP,
    ")"                   => RP,
    ";"                   => SEMI,
} else {
    r"[.--\s]+"           => Str, // separate because the regex overlaps with Id
}
